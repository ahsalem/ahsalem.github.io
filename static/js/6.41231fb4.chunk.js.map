{"version":3,"sources":["hooks/useDebounce.js","common/network.js","pages/agents/utils/connections.js","pages/agents/utils/events.js","pages/agents/components/AgentCard.js","pages/agents/components/AgentSearch.js","pages/agents/components/AgentsView.js","pages/details/index.js"],"names":["useDebounce","debounce","timeout","func","wait","immediate","context","this","args","arguments","later","apply","callNow","clearTimeout","setTimeout","IS_PROD","window","location","protocol","ORIGIN","host","hostname","Cookies","get","ROUTES","query","getSuggestions","a","axios","response","console","error","suggestionsRequest","status","suggestions","data","resultGroups","results","AgentCard","details","Box","background","width","pad","gap","border","round","elevation","Avatar","size","src","color","Text","Broker","Heading","margin","level","Name","direction","Phone","Cell","Anchor","href","MailOption","Email","weight","State","states","Button","primary","label","onClick","AddressSearch","placeholder","users","setAgents","useState","suggestionOpen","setSuggestionOpen","updateState","forceUpdate","useCallback","setQuery","setSuggestions","boxRef","useRef","useEffect","onChange","e","target","value","stateCode","trim","Object","keys","forEach","stateKey","toLowerCase","includes","filteredUsers","filter","u","length","map","ref","height","left","align","horizontal","undefined","side","style","borderBottomLeftRadius","borderBottomRightRadius","TextInput","type","plain","dropTarget","current","onSelect","event","index","list","display","top","right","split","onSuggestionsOpen","onSuggestionsClose","Search","AgentsView","heading","appContext","useAppContext","mapView","setMapView","useQueryParam","StringParam","viewType","setViewType","agents","setInitialized","useNavigate","navigate","bottom","vertical","AgentSearch","overflowY","Grid","rows","columns","count","appSize","InfiniteScroll","items","step","item","find","Details","useParams","id"],"mappings":"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","file":"static/js/6.41231fb4.chunk.js","sourcesContent":["// Credit David Walsh (https://davidwalsh.name/javascript-debounce-function)\n\n// Returns a function, that, as long as it continues to be invoked, will not\n// be triggered. The function will be called after it stops being called for\n// N milliseconds. If `immediate` is passed, trigger the function on the\n// leading edge, instead of the trailing.\n\nconst useDebounce = () => {\n  const debounce = ({ func, wait, immediate }) => {\n    let timeout\n    // This is the function that is actually executed when\n    // the DOM event is triggered.\n    return function executedFunction() {\n      // Store the context of this and any\n      // parameters passed to executedFunction\n      const context = this\n      const args = arguments\n\n      // The function to be called after\n      // the debounce time has elapsed\n      const later = function() {\n        // null timeout to indicate the debounce ended\n        timeout = null\n\n        // Call function now if you did not on the leading end\n        if (!immediate) func.apply(context, args)\n      }\n\n      // Determine if you should call the function\n      // on the leading or trail end\n      const callNow = immediate && !timeout\n\n      // This will reset the waiting every function execution.\n      // This is the step that prevents the function from\n      // being executed because it will never reach the\n      // inside of the previous setTimeout\n      clearTimeout(timeout)\n\n      // Restart the debounce waiting period.\n      // setTimeout returns a truthy value (it differs in web vs node)\n      timeout = setTimeout(later, wait)\n\n      // Call immediately if you're dong a leading\n      // end execution\n      if (callNow) func.apply(context, args)\n    }\n  }\n  return {\n    debounce,\n  }\n}\n\nexport default useDebounce\n","import Cookies from \"js-cookie\"\nimport { saveAs } from \"file-saver\"\nimport * as queryString from \"query-string\"\nimport { fetch as fetchPolyfill } from \"whatwg-fetch\"\nconst IS_PROD = process.env.NODE_ENV === \"production\" && window.location.protocol == \"https:\"\nconst ORIGIN = `${window.location.protocol}//${IS_PROD ? window.location.host : window.location.hostname + \":8000\"}`\n\nconst fetchConfig = {\n  method: \"GET\",\n  cache: \"no-store\", // none of these requests should be cached\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"X-CSRF-Token\": Cookies.get(\"antiCsrfToken\"),\n    credentials: \"include\",\n    cache: \"no-store\", // none of these requests should be cached\n  },\n}\n\nconst fetchPostConfig = body => ({\n  ...fetchConfig,\n  body: JSON.stringify(body),\n  method: \"POST\",\n})\n\nconst fetchPutConfig = body => ({\n  ...fetchConfig,\n  body: JSON.stringify(body),\n  method: \"PUT\",\n})\n\nconst fetchDeleteConfig = () => ({\n  ...fetchConfig,\n  method: \"DELETE\",\n})\n\nconst fetchPostFormConfig = body => ({\n  ...fetchConfig,\n  method: \"POST\",\n  headers: {\n    ...fetchConfig.headers,\n    \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8\",\n  },\n  body: queryString.stringify(body),\n})\n\nconst fetchPostFile = (tag, file, type) => {\n  const data = new FormData()\n  data.append(\"file\", file)\n  data.append(\"tag\", tag)\n  data.append(\"type\", type)\n\n  const body = {\n    ...fetchConfig,\n    method: \"POST\",\n    headers: {\n      ...fetchConfig.headers,\n      \"Content-Type\": undefined,\n    },\n    body: data,\n  }\n  delete body.headers[\"Content-Type\"]\n  return body\n}\n\nconst lensFetch = async (route, config) => {\n  const monkeyRoute = route\n  return await fetchPolyfill(monkeyRoute, config)\n}\n\nexport {\n  fetchConfig,\n  fetchPostConfig,\n  fetchPutConfig,\n  fetchDeleteConfig,\n  fetchPostFormConfig,\n  fetchPostFile,\n  lensFetch,\n  IS_PROD,\n  ORIGIN,\n}\n","import { ORIGIN } from \"./../../../common/network\"\nimport axios from \"axios\"\n\nconst ROUTES = {\n  SUGGESTIONS: query => `https://www.zillowstatic.com/autocomplete/v2/suggestions?q=${query}`,\n}\n\nconst getSuggestions = async query => {\n  try {\n    const response = await axios.get(ROUTES.SUGGESTIONS(query))\n    return response\n  } catch (error) {\n    console.error(error)\n  }\n}\n\nexport { getSuggestions, ROUTES }\n","import { getSuggestions as suggestionsRequest } from \"./connections\"\n\nconst getSuggestions = async query => {\n  const response = await suggestionsRequest(query)\n\n  if (response && response.status == 200) {\n    const suggestions = response.data\n    return suggestions?.resultGroups[0]?.results\n  }\n  return null\n}\n\nexport { getSuggestions }\n","import React, { useState, useEffect, useCallback, useRef } from \"react\"\nimport pt from \"prop-types\"\nimport { Text, Heading, Box, Anchor, Button, Avatar } from \"grommet\"\nimport { MailOption, Phone } from \"grommet-icons\"\nimport { states } from \"./../../../common/us-states\"\nimport { randomIntFromInterval } from \"./../../../common/utils\"\n\nconst AgentCard = ({ details }) => {\n  const imageSrc = 'images/agents/profile.jpg' //\"/images/avatars/\" + randomIntFromInterval(1, 21) + \".svg\"\n  return (\n    <Box background=\"light-1\" width=\"flex\" pad=\"small\" gap=\"small\" border=\"all\" round=\"xsmall\" elevation=\"small\">\n      <Avatar\n        elevation=\"small\"\n        size=\"large\"\n        src={imageSrc || details.Image}\n        background=\"accent-4\"\n        border=\"all\"\n        color=\"accent-2\"\n      />\n      <Text size=\"small\" color=\"dark-1\">\n        {details.Broker || \"\"}\n      </Text>\n      <Heading margin=\"0\" level=\"3\" color=\"brand\">\n        {details.Name}\n      </Heading>\n      <Box direction=\"row\" gap=\"xsmall\">\n        <Phone color=\"brand\"></Phone>\n        <Text color=\"dark-1\" size=\"xsmall\">\n          {details.Cell}\n        </Text>\n      </Box>\n      <Box direction=\"row\" gap=\"xsmall\">\n        <Anchor href=\"#\">\n          <MailOption color=\"brand\" />\n        </Anchor>\n        <Text color=\"dark-1\" size=\"xsmall\">\n          {details.Email}\n        </Text>\n      </Box>\n      <Text weight=\"bold\" color=\"brand\" size=\"xsmall\">\n        {details.State ? states[details.State] : \"\"}\n      </Text>\n\n      <Box direction=\"row\" gap=\"small\" pad=\"small\">\n        <Button primary size=\"small\" color=\"brand\" label=\"Read More\" onClick={() => {}} />\n        <Button size=\"small\" color=\"brand\" label=\"Book\" onClick={() => {}} />\n      </Box>\n    </Box>\n  )\n}\n\nexport default AgentCard\n","import React, { useState, useEffect, useCallback, useRef } from \"react\"\nimport pt from \"prop-types\"\nimport { Text, Box, TextInput } from \"grommet\"\nimport { useQueryParam, StringParam } from \"use-query-params\"\nimport { Search } from \"grommet-icons\"\nimport { getSuggestions } from \"../utils/events\"\nimport useDebounce from \"../../../hooks/useDebounce\"\nimport useNavigate from \"../../../hooks/useNavigate\"\nimport { abbreviation, states } from \"./../../../common/us-states\"\n\nconst AddressSearch = ({ placeholder, width, users, setAgents }) => {\n  const [suggestionOpen, setSuggestionOpen] = useState(false)\n  const [, updateState] = useState()\n  const forceUpdate = useCallback(() => updateState({}), [])\n  const [query, setQuery] = useState(\"\")\n  const [suggestions, setSuggestions] = useState([])\n  const boxRef = useRef()\n  const { debounce } = useDebounce()\n\n  useEffect(() => {\n    forceUpdate()\n  }, [forceUpdate])\n\n  const onChange = async e => {\n    const query = e.target.value\n    let stateCode = []\n\n    setQuery(query)\n    if (!query.trim()) {\n      setAgents(users.map(u => u.Name))\n    } else {\n      Object.keys(states).forEach(stateKey => {\n        const stateName = states[stateKey].toLowerCase().includes(query.toLowerCase())\n        if (!!stateName) {\n          //stateCode.push(stateKey)\n        }\n      })\n\n      const filteredUsers = users?.filter(u => {\n        if (stateCode.length) {\n          return stateCode.includes(u.State)\n        } else {\n          return u.Name.toLowerCase().includes(query.toLowerCase())\n        }\n      })\n      setAgents(filteredUsers.map(u => u.Name))\n    }\n  }\n\n  const onSelect = event => {\n    setQuery(\"\")\n    setSuggestions([])\n    // navigate(`${ROUTES.DETAILS}/${event.suggestion.value.ticker}`)\n  }\n\n  const renderSuggestions = () => {\n    return suggestions.map(({ display }, index, list) => ({\n      label: (\n        <Box direction=\"row\" border={{ top: { size: \"xsmall\" }, color: \"light-5\" }} pad=\"xsmall\">\n          <Box pad={{ right: { size: \"medium\" } }} margin={{ left: \"small\", right: \"small\" }}>\n            <Text size=\"medium\">{display.split(\",\")[0]}</Text>\n          </Box>\n          <Box>\n            <Text color=\"status-unknown\" size={\"medium\"}>\n              {display.split(\",\")[1]}\n            </Text>\n          </Box>\n        </Box>\n      ),\n      value: { display },\n    }))\n  }\n\n  return (\n    <Box\n      ref={boxRef}\n      width={width || \"xlarge\"}\n      direction=\"row\"\n      height=\"40px\"\n      margin={{ left: \"medium\" }}\n      round=\"xsmall\"\n      align=\"center\"\n      background={\"light-1\"}\n      pad={{ horizontal: \"xsmall\" }}\n      elevation={suggestionOpen ? \"medium\" : undefined}\n      border={{\n        side: \"all\",\n        color: suggestionOpen ? \"transparent\" : \"border\",\n      }}\n      style={suggestionOpen ? { borderBottomLeftRadius: \"0px\", borderBottomRightRadius: \"0px\" } : {}}\n    >\n      <TextInput\n        type=\"search\"\n        plain\n        value={query}\n        onChange={onChange}\n        dropTarget={boxRef.current}\n        onSelect={onSelect}\n        placeholder={placeholder}\n        suggestions={renderSuggestions()}\n        onSuggestionsOpen={() => setSuggestionOpen(true)}\n        onSuggestionsClose={() => setSuggestionOpen(false)}\n      />\n      <Box>\n        <Search color=\"brand\" />\n      </Box>\n    </Box>\n  )\n}\n\nexport default AddressSearch\n","import React, { useState, useEffect, useCallback, useRef, useContext } from \"react\"\nimport pt from \"prop-types\"\nimport { Text, DataTable, Box, Heading, Avatar } from \"grommet\"\nimport { useQueryParam, StringParam } from \"use-query-params\"\nimport useNavigate from \"../../../hooks/useNavigate\"\nimport ViewSelector from \"./ViewSelector\"\nimport { getSuggestions } from \"../../../common/events\"\nimport { abbreviation, states } from \"../../../common/us-states\"\nimport useDebounce from \"../../../hooks/useDebounce\"\nimport { ROUTES } from \"../../../routes/routes\"\nimport { Grid, Image, InfiniteScroll, List } from \"grommet\"\nimport { Gremlin } from \"grommet-icons\"\nimport AgentCard from \"./AgentCard\"\nimport AgentSearch from \"./AgentSearch\"\nimport { useAppContext } from \"./../../../app/app-context\"\n\nconst AgentsView = ({ users, placeholder, heading }) => {\n  debugger\n  const appContext = useAppContext()\n  const [suggestionOpen, setSuggestionOpen] = useState(false)\n  const [, updateState] = useState()\n  const forceUpdate = useCallback(() => updateState({}), [])\n  const [query, setQuery] = useState(\"\")\n  const [suggestions, setSuggestions] = useState([])\n  const boxRef = useRef()\n  const [mapView, setMapView] = useState(true)\n  const [viewType, setViewType] = useQueryParam(\"viewType\", StringParam)\n  const [agents, setAgents] = useState(users.map(a => a.Name))\n  const [initialized, setInitialized] = useState(false)\n  const { navigate } = useNavigate()\n  const [selectedAgent, setSelectedAgent] = useState()\n\n  useEffect(() => {\n    forceUpdate()\n  }, [forceUpdate])\n\n  useEffect(() => {\n    if (!viewType) {\n      setViewType(mapView ? \"map\" : \"list\")\n    } else {\n      setMapView(viewType === \"map\" ? true : false)\n    }\n    setInitialized(true)\n  }, [])\n\n  const onLetterClick = stateLetter => {\n    if (stateLetter === \"All\") {\n      setAgents(users.map(u => u.Name))\n    } else if (stateLetter && stateLetter.length) {\n      const filterd = users.filter(a => a.State.charAt(0).toLocaleLowerCase() === stateLetter.toLocaleLowerCase())\n      setAgents(filterd.map(i => i.Name))\n    }\n  }\n\n  const handleSwitchView = selectedView => {\n    if (viewType === selectedView) {\n      return\n    }\n    setMapView(!mapView)\n    setViewType(mapView ? \"list\" : \"map\")\n  }\n\n  return (\n    <Box pad={{ top: \"small\", left: \"medium\", bottom: \"small\", right: \"medium\" }} direction=\"column\">\n      <Heading level=\"4\" color=\"brand\">\n        Get in touch with one of our agents {heading}\n      </Heading>\n      <Text size=\"small\" color=\"dark-3\" margin={{ bottom: \"small\" }}>\n        Here you can quickly and easily get in touch with our realtors if you want to sell, value or buy your home. The\n        Iraqi American Realtors a nationwide group of certified independent real estate agents throughout the USA. Find\n        your local broker bellow. Our goal is to make the housing market a less complicated place. Whether you plan to\n        move tomorrow or in ten years. We usually say that we make it easier to sell and easier to buy - both before,\n        during and afterwards.\n      </Text>\n      <Box height=\"small\" pad={{ vertical: \"small\" }} direction=\"row\">\n        <AgentSearch users={users} setAgents={setAgents} placeholder={placeholder || \"Search\"} width=\"large\" />\n      </Box>\n      <Box direction=\"row\" style={{ height: 1400, overflowY: \"auto\" }}>\n        <Box direction=\"row\" style={{ height: 1400, overflowY: \"auto\" }} pad=\"medium\" margin={{ top: \"small\" }}>\n          <Box width={\"100%\"}>\n            <>\n              <Grid\n                rows=\"medium\"\n                columns={{\n                  count: appContext.appSize === \"small\" ? 1 : appContext.appSize === \"medium\" ? 3 : 5,\n                  size: \"auto\",\n                }}\n                gap={\"medium\"}\n              >\n                <InfiniteScroll items={agents} step={100}>\n                  {item => <AgentCard details={users?.find(a => a.Name === item)}></AgentCard>}\n                </InfiniteScroll>\n              </Grid>\n            </>\n          </Box>\n        </Box>\n      </Box>\n    </Box>\n  )\n}\n\nexport default AgentsView\n\nconst LettersFilter = ({ onLetterClick }) => {\n  return (\n    <Box>\n      <Grid\n        margin={{ left: \"medium\" }}\n        columns={{ count: 25, size: \"flex\" }}\n        row={{\n          count: 1,\n        }}\n        gap=\"small\"\n      >\n        {[...abbreviation, \"All\"].map(s => {\n          return (\n            <Box\n              onClick={() => {\n                onLetterClick(s)\n              }}\n              background=\"light-4\"\n              round=\"medium\"\n              align=\"center\"\n              pad={{ horizontal: \"small\" }}\n            >\n              <Text color=\"brand\" size=\"medium\">\n                {s}\n              </Text>\n            </Box>\n          )\n        })}\n      </Grid>\n    </Box>\n  )\n}\n","import React from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport { Box, Text } from \"grommet\"\nimport useLocalStorage from \"./../../hooks/useLocalStorage\"\nimport AgentsView from \"./../agents/components/AgentsView\"\nimport { users } from \"./../../mocks/users\"\n\nconst Details = () => {\n  let { id } = useParams()\n\n  return (\n    <Box direction=\"column\" background=\"light-2\">\n      <AgentsView placeholder='\"Search by agent or state name\"' users={users}></AgentsView>\n    </Box>\n  )\n}\n\nexport default Details\n"],"sourceRoot":""}